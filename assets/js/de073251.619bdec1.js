"use strict";(self.webpackChunkbifromq=self.webpackChunkbifromq||[]).push([[200],{34949:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"plugin/plugin_practice","title":"BifroMQ Plugin Practice and Notice","description":"BifroMQ is a powerful messaging system that allows seamless communication between itself and customized services.","source":"@site/versioned_docs/version-2.0.0/06_plugin/5_plugin_practice.md","sourceDirName":"06_plugin","slug":"/plugin/plugin_practice","permalink":"/docs/2.0.0/plugin/plugin_practice","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/bifromq-sites/tree/master/website/versioned_docs/version-2.0.0/06_plugin/5_plugin_practice.md","tags":[],"version":"2.0.0","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"BifroMQ Plugin Practice and Notice"},"sidebar":"tutorialSidebar","previous":{"title":"Setting Provider","permalink":"/docs/2.0.0/plugin/setting_provider"},"next":{"title":"Operations","permalink":"/docs/2.0.0/category/operations"}}');var r=i(23420),o=i(65404);const a={sidebar_position:5,title:"BifroMQ Plugin Practice and Notice"},s="Plugin Practice and Notice in BifroMQ",l={},d=[{value:"Setting the Plugin&#39;s FQN (Fully Qualified Name)",id:"setting-the-plugins-fqn-fully-qualified-name",level:2},{value:"Fully Utilize Java Remote Debugging with BifroMQ",id:"fully-utilize-java-remote-debugging-with-bifromq",level:2},{value:"Pay Attention to Java ClassLoading",id:"pay-attention-to-java-classloading",level:2},{value:"Organize Plugin Directory Correctly",id:"organize-plugin-directory-correctly",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"plugin-practice-and-notice-in-bifromq",children:"Plugin Practice and Notice in BifroMQ"})}),"\n",(0,r.jsx)(n.p,{children:"BifroMQ is a powerful messaging system that allows seamless communication between itself and customized services.\nWhen working with BifroMQ plugins, it's essential to follow best practices and be aware of certain considerations\nto ensure smooth integration and debugging. This article outlines some essential practices and notices when developing\nBifroMQ plugins."}),"\n",(0,r.jsx)(n.h2,{id:"setting-the-plugins-fqn-fully-qualified-name",children:"Setting the Plugin's FQN (Fully Qualified Name)"}),"\n",(0,r.jsxs)(n.p,{children:["When developing a BifroMQ plugin, it's essential to set its Fully Qualified Name (FQN) in the ",(0,r.jsx)(n.code,{children:"standalone.yml"}),"\nconfiguration file. The FQN uniquely identifies the plugin and helps BifroMQ to load and manage the plugin effectively.\nThe FQN should be set at the root level of the configuration.\nExample:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"authProviderFQN: com.example.plugin.MyPlugin\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the FQN for the plugin is ",(0,r.jsx)(n.code,{children:"com.example.plugin.MyPlugin"}),".\nEnsure that the FQN accurately represents the plugin's package and class name."]}),"\n",(0,r.jsxs)(n.p,{children:["Especially, in the current implementation of BifroMQ, the ",(0,r.jsx)(n.a,{href:"/docs/2.0.0/plugin/auth_provider",children:"authProvider"}),"\nand ",(0,r.jsx)(n.a,{href:"/docs/2.0.0/plugin/setting_provider",children:"settingProvider"})," need to specify FQN (Fully Qualified Name). However,\nfor ",(0,r.jsx)(n.a,{href:"/docs/2.0.0/plugin/event_collector",children:"eventCollector"}),", it is not required to do so, and multiple implementations\nof eventCollector are allowed."]}),"\n",(0,r.jsx)(n.h2,{id:"fully-utilize-java-remote-debugging-with-bifromq",children:"Fully Utilize Java Remote Debugging with BifroMQ"}),"\n",(0,r.jsxs)(n.p,{children:["Java Remote Debugging allows developers to debug customized plugins remotely from an IDE.\nBifroMQ supports remote debugging, which can be enabled through environment variable ",(0,r.jsx)(n.code,{children:"JVM_DEBUG"}),". Also, one can specify\nremote debugging port through environment variable ",(0,r.jsx)(n.code,{children:"JAVA_DEBUG_PORT"}),". If it is not specified, the default one is 8008.\nExample in Linux Shell:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"export JVM_DEBUG=true\nexport JAVA_DEBUG_PORT=8009\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure to configure the debugging port correctly and there is no port conflict. And one can use it to connect\nthe IDE (e.g., ",(0,r.jsx)(n.a,{href:"https://www.jetbrains.com/help/idea/tutorial-remote-debug.html",children:"IntelliJ"}),"\nor ",(0,r.jsx)(n.a,{href:"https://www.eclipse.org/community/eclipse_newsletter/2017/june/article1.php",children:"Eclipse"}),") for remote debugging."]}),"\n",(0,r.jsxs)(n.p,{children:["Environment variable ",(0,r.jsx)(n.code,{children:"DEBUG_SUSPEND_FLAG"})," option defines whether the JVM should suspend and wait for a debugger to\nattach or not. If developers want to JVM to suspend, ",(0,r.jsx)(n.code,{children:"export DEBUG_SUSPEND_FLAG=y"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"pay-attention-to-java-classloading",children:"Pay Attention to Java ClassLoading"}),"\n",(0,r.jsx)(n.p,{children:"Java ClassLoading is crucial when developing plugins, especially if the plugins rely on external libraries or modules.\nEnsure proper handling of ClassLoaders during plugin initialization and other phases."}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.code,{children:"KafkaProducer"})," might depend on some classes that use ",(0,r.jsx)(n.code,{children:"ContextClassLoader"})," during initialization. If the\ncurrent contextClassLoader points to ",(0,r.jsx)(n.code,{children:"AppClassLoader"}),", it may cause ",(0,r.jsx)(n.code,{children:"ClassNotFoundException"}),".\nBifroMQ has covered some cases during plugin construction phase, but developers should be vigilant in other\nphases to avoid potential ClassLoading issues. The initialization of dependencies involved in the above scenario can\nbe performed as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class MyAuthProvider {  \n    public void method() {\n        try {\n            ClassLoader originalLoader = Thread.currentThread().getContextClassLoader();\n            ClassLoader targetLoader = this.getClass().getClassLoader();\n            Thread.currentThread().setContextClassLoader(targetLoader);\n            // Initialize dependencies here  \n            dependenciesInit();\n        }finally {\n            Thread.currentThread().setContextClassLoader(originalLoader);\n        }\n    }  \n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"organize-plugin-directory-correctly",children:"Organize Plugin Directory Correctly"}),"\n",(0,r.jsx)(n.p,{children:"When developing plugins, ensure that there are no unrelated jar files in the plugin directory.\nPF4J (Plugin Framework for Java) recursively checks jar files in the plugin directory, and unrelated jars\nmay cause PF4J validation errors."}),"\n",(0,r.jsx)(n.p,{children:"Keeping the plugin directory clean and containing only the necessary jar files ensures smooth plugin loading and\navoids any conflicts or validation issues."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(36672);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);