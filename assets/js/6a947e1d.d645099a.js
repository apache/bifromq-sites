"use strict";(self.webpackChunkbifromq=self.webpackChunkbifromq||[]).push([[53020],{53546:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(59729);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},76880:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"plugin/plugin_practice","title":"Plugin Practice and Notice","description":"This article outlines some practices and considerations when developing BifroMQ plugins.","source":"@site/versioned_docs/version-3.0.x/06_plugin/5_plugin_practice.md","sourceDirName":"06_plugin","slug":"/plugin/plugin_practice","permalink":"/docs/3.0.x/plugin/plugin_practice","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/bifromq-sites/tree/master/versioned_docs/version-3.0.x/06_plugin/5_plugin_practice.md","tags":[],"version":"3.0.x","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Plugin Practice and Notice"},"sidebar":"tutorialSidebar","previous":{"title":"Tenant-level Settings","permalink":"/docs/3.0.x/plugin/setting_provider/tenantsetting"},"next":{"title":"Admin Guide Overview","permalink":"/docs/3.0.x/admin_guide/overview"}}');var t=i(65813),o=i(53546);const s={sidebar_position:5,title:"Plugin Practice and Notice"},a=void 0,l={},d=[{value:"Remote Debugging with BifroMQ",id:"remote-debugging-with-bifromq",level:2},{value:"Pay Attention to Java ClassLoading",id:"pay-attention-to-java-classloading",level:2},{value:"Properly Organize the Plugin Directory",id:"properly-organize-the-plugin-directory",level:2},{value:"Metrics and Logging",id:"metrics-and-logging",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This article outlines some practices and considerations when developing BifroMQ plugins."}),"\n",(0,t.jsx)(n.h2,{id:"remote-debugging-with-bifromq",children:"Remote Debugging with BifroMQ"}),"\n",(0,t.jsxs)(n.p,{children:["BifroMQ supports remote debugging, which can be activated through the ",(0,t.jsx)(n.code,{children:"JVM_DEBUG"})," environment variable. Additionally, the remote debugging port can be specified through the ",(0,t.jsx)(n.code,{children:"JAVA_DEBUG_PORT"})," environment variable. If not specified, the\ndefault port is 8008. Before starting the BifroMQ process, specify these environment variables using shell:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"export JVM_DEBUG=true\nexport JAVA_DEBUG_PORT=8008\nexport DEBUG_SUSPEND_FLAG=n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ensure the debugging port is correctly configured to avoid port conflicts. Remote debugging can be performed using an IDE (for example, IntelliJ or Eclipse). Setting DEBUG_SUSPEND_FLAG=y can assist in debugging the plugin's initialization\nprocess."}),"\n",(0,t.jsx)(n.h2,{id:"pay-attention-to-java-classloading",children:"Pay Attention to Java ClassLoading"}),"\n",(0,t.jsxs)(n.p,{children:["BifroMQ uses separate ClassLoaders for each plugin to load classes from the plugin's classpath. Therefore, ensure your plugin's packaging includes all dependencies used (except those ",(0,t.jsx)(n.a,{href:"/docs/3.0.x/plugin/intro#plugin-deployment",children:"provided"})," by BifroMQ). Some\nthird-party libraries might load classes in other ways, leading to class loading failures. Most situations can be resolved by swapping the Thread ContextLoader:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class MyAuthProvider {\n    public void method() {\n        try {\n            ClassLoader originalLoader = Thread.currentThread().getContextClassLoader();\n            ClassLoader targetLoader = this.getClass().getClassLoader();\n            Thread.currentThread().setContextClassLoader(targetLoader);\n            // Initialize dependencies here  \n            dependenciesInit();\n        } finally {\n            Thread.currentThread().setContextClassLoader(originalLoader);\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properly-organize-the-plugin-directory",children:"Properly Organize the Plugin Directory"}),"\n",(0,t.jsxs)(n.p,{children:["When developing plugins, ensure there are no unrelated jar files in the plugin directory. ",(0,t.jsx)(n.a,{href:"https://pf4j.org",children:"pf4j"})," recursively checks jar files in the plugin directory, and unrelated jars may lead to PF4J validation errors. Keeping the\nplugin directory clean and containing only necessary jar files ensures smooth plugin loading and prevents conflicts or validation issues."]}),"\n",(0,t.jsx)(n.h2,{id:"metrics-and-logging",children:"Metrics and Logging"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Plugin developers are encouraged to utilize the BifroMQ logging framework for plugin logging, making use of the same ",(0,t.jsx)(n.code,{children:"logback.xml"})," for logger configuration."]}),"\n",(0,t.jsx)(n.li,{children:"BifroMQ captures and records metrics during invocations of plugin methods, offering useful insights for debugging and performance optimization."}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);