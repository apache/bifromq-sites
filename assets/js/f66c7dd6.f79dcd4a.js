"use strict";(self.webpackChunkbifromq=self.webpackChunkbifromq||[]).push([[62413],{29611:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"operations/logs_observable","title":"Logs and Observable","description":"Logging","source":"@site/versioned_docs/version-2.0.0/07_operations/4_logs_observable.md","sourceDirName":"07_operations","slug":"/operations/logs_observable","permalink":"/docs/2.0.0/operations/logs_observable","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/bifromq-sites/tree/master/versioned_docs/version-2.0.0/07_operations/4_logs_observable.md","tags":[],"version":"2.0.0","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"High Availability","permalink":"/docs/2.0.0/operations/high_availability"},"next":{"title":"Operations in API service","permalink":"/docs/2.0.0/operations/api_service"}}');var i=o(65813),r=o(53546);const s={sidebar_position:4},l="Logs and Observable",a={},d=[{value:"Logging",id:"logging",level:2},{value:"Configuration File",id:"configuration-file",level:3},{value:"Event Collection",id:"event-collection",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Prometheus Integration Method",id:"prometheus-integration-method",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"logs-and-observable",children:"Logs and Observable"})}),"\n",(0,i.jsx)(t.h2,{id:"logging",children:"Logging"}),"\n",(0,i.jsx)(t.p,{children:"BifroMQ generates logs based on the standard slf4j interface. Log content is categorized into five levels: TRACE, DEBUG, INFO, WARN, and ERROR. You can choose to print any of these log levels by modifying the configuration file."}),"\n",(0,i.jsx)(t.h3,{id:"configuration-file",children:"Configuration File"}),"\n",(0,i.jsx)(t.p,{children:"The log configuration file is named logback.xml and is located at:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Installation Method"}),(0,i.jsx)(t.th,{children:"File Location"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Unzipping Archive"}),(0,i.jsx)(t.td,{children:"./conf/logback.xml"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Docker Container"}),(0,i.jsx)(t.td,{children:"/usr/share/bifromq/conf/logback.xml"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"The log configuration file uses the standard logback configuration method. Detailed explanations are not provided here, but you can modify the configuration according to your needs."}),"\n",(0,i.jsx)(t.p,{children:'One thing to note is that the provided logback configuration file will set the log file directory based on the system parameters "LOG_DIR" and "user.dir".'}),"\n",(0,i.jsx)(t.h2,{id:"event-collection",children:"Event Collection"}),"\n",(0,i.jsx)(t.p,{children:"During its operation, BifroMQ extracts real-time execution information from some internal key operational points and formulates them into Events. These are written out uniformly through the EventCollectorManager."}),"\n",(0,i.jsx)(t.p,{children:"The types of Events can be broadly divided into:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Events related to the MQTT protocol, such as connection, disconnection, subscription, message pushing, etc."}),"\n",(0,i.jsx)(t.li,{children:"Events related to alarm types, such as protocol violations, internal errors, capacity exceeding limits, etc."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The destination for writing out Events is the implementation of the IEventCollector extension point, loaded at startup through pf4j."}),"\n",(0,i.jsxs)(t.p,{children:["You can refer to ",(0,i.jsx)(t.a,{href:"https://github.com/bifromqio/bifromq/blob/main/build/build-plugin-demo/src/main/java/com/baidu/demo/plugin/EventLogger.java",children:"DemoEventLogger"})," to implement your own EventCollector to collect the rich runtime events provided by BifroMQ."]}),"\n",(0,i.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsx)(t.p,{children:"BifroMQ has an integrated wealth of Metrics system indicators based on Micrometer to help users understand the real-time status of the service, monitor system health, and identify system performance issues."}),"\n",(0,i.jsx)(t.p,{children:"You can output Metrics by integrating them into Prometheus or opt to output them through other methods supported by Micrometer."}),"\n",(0,i.jsx)(t.h3,{id:"prometheus-integration-method",children:"Prometheus Integration Method"}),"\n",(0,i.jsx)(t.p,{children:"BifroMQ does not include a built-in component for Micrometer to output to Prometheus by default. You can create a plugin loaded by the pf4j framework and implement Micrometer's push or pull mechanism to Prometheus within the plugin."}),"\n",(0,i.jsxs)(t.p,{children:["The archive you downloaded and unzipped comes with ./plugins/demo-plugin-1.0.0-SNAPSHOT.jar, which provides an Endpoint for Prometheus to pull Metrics: ",(0,i.jsx)(t.code,{children:"http://127.0.0.1:9090/metrics"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can also refer to ",(0,i.jsx)(t.a,{href:"https://github.com/bifromqio/bifromq/blob/main/build/build-plugin-demo/src/main/java/com/baidu/demo/plugin/DemoPlugin.java",children:"DemoPlugin"})," to implement your own Plugin."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},53546:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>l});var n=o(59729);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);