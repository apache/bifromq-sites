"use strict";(self.webpackChunkbifromq=self.webpackChunkbifromq||[]).push([[64054],{47966:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"cluster/upgrade","title":"Upgrade","description":"Important: Since BifroMQ joined the Apache Incubator, the Java package names have changed. Users of pre-incubation versions must migrate to the Apache-released BifroMQ versions to avoid package conflicts.","source":"@site/docs/cluster/upgrade.md","sourceDirName":"cluster","slug":"/cluster/upgrade","permalink":"/docs/cluster/upgrade","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/bifromq-sites/tree/master/docs/cluster/upgrade.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Upgrade"},"sidebar":"tutorialSidebar","previous":{"title":"High Availability","permalink":"/docs/cluster/high_availability"},"next":{"title":"User Guide Overview","permalink":"/docs/user_guide/intro"}}');var s=i(65813),t=i(53546);const o={sidebar_position:3,title:"Upgrade"},l="Upgrade Guide",a={},d=[{value:"Version Compatibility",id:"version-compatibility",level:2},{value:"Compatibility Rules",id:"compatibility-rules",level:3},{value:"Upgrade Methods",id:"upgrade-methods",level:2},{value:"In-Place Upgrade",id:"in-place-upgrade",level:3},{value:"Steps for In-Place Upgrade",id:"steps-for-in-place-upgrade",level:4},{value:"Replace Upgrade",id:"replace-upgrade",level:3},{value:"Steps for Replace Upgrade",id:"steps-for-replace-upgrade",level:4},{value:"Important Considerations for Replace Upgrade",id:"important-considerations-for-replace-upgrade",level:4},{value:"Summary",id:"summary",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," Since BifroMQ joined the Apache Incubator, the Java package names have changed. Users of pre-incubation versions must migrate to the Apache-released BifroMQ versions to avoid package conflicts."]})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"upgrade-guide",children:"Upgrade Guide"})}),"\n",(0,s.jsx)(n.p,{children:"BifroMQ supports multiple upgrade strategies to ensure smooth transitions between versions. This document provides a detailed guide on upgrading BifroMQ, including version compatibility, upgrade methods, and specific steps for each method."}),"\n",(0,s.jsx)(n.h2,{id:"version-compatibility",children:"Version Compatibility"}),"\n",(0,s.jsxs)(n.p,{children:["BifroMQ version compatibility is categorized into two main aspects: ",(0,s.jsx)(n.strong,{children:"data compatibility"})," and ",(0,s.jsx)(n.strong,{children:"inter-cluster RPC protocol compatibility"}),". The versioning scheme follows semantic versioning conventions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"x.y.z"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"x"}),": Major version number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"y"}),": Minor version number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"z"}),": Patch version number."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"compatibility-rules",children:"Compatibility Rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Patch Version Upgrades (x.y.z)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When only the patch version (z) changes, ",(0,s.jsx)(n.strong,{children:"both data compatibility and inter-cluster RPC protocol compatibility"})," are guaranteed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Minor Version Upgrades (x.y)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When the minor version (y) changes, ",(0,s.jsx)(n.strong,{children:"inter-cluster RPC protocol compatibility"})," is guaranteed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data compatibility"})," may change, but any such changes will be explicitly documented."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Major Version Upgrades (x)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Major version upgrades may introduce ",(0,s.jsx)(n.strong,{children:"breaking changes"})," that affect both data compatibility and inter-cluster RPC protocol compatibility."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rolling upgrades within the cluster are not supported"})," for major version changes unless explicitly stated in the release notes that both data compatibility and inter-cluster RPC protocol compatibility are maintained. Users will need to manage the migration of their applications and data from the old version cluster to the new version cluster independently."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"upgrade-methods",children:"Upgrade Methods"}),"\n",(0,s.jsx)(n.p,{children:"BifroMQ supports two rolling upgrade methods:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"In-Place Upgrade"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Replace Upgrade"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"in-place-upgrade",children:"In-Place Upgrade"}),"\n",(0,s.jsx)(n.p,{children:"This method is suitable when the new version maintains both data compatibility and inter-cluster RPC protocol compatibility with the existing version."}),"\n",(0,s.jsx)(n.h4,{id:"steps-for-in-place-upgrade",children:"Steps for In-Place Upgrade"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stop the Current Version"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Gracefully shut down the BifroMQ service."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Preserve the Data Directory"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure the ",(0,s.jsx)(n.code,{children:"data"})," directory is retained."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Update Files and Configurations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Replace the necessary binaries and update the configuration files as required by the new version."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Start the New Version"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Launch the new version of BifroMQ using the existing data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"replace-upgrade",children:"Replace Upgrade"}),"\n",(0,s.jsx)(n.p,{children:"Use this method when the new version does not maintain data compatibility or when inter-cluster RPC protocol compatibility is ensured."}),"\n",(0,s.jsx)(n.h4,{id:"steps-for-replace-upgrade",children:"Steps for Replace Upgrade"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add New Version Nodes"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Gradually introduce nodes running the new version into the cluster."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Remove Old Version Nodes"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sequentially remove nodes running the old version from the cluster until all nodes are upgraded to the new version."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automatic Data Migration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"During the upgrade, BifroMQ automatically handles data migration and synchronization between nodes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"important-considerations-for-replace-upgrade",children:"Important Considerations for Replace Upgrade"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Voter Configuration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure that the following BifroSysProp properties for ",(0,s.jsx)(n.code,{children:"dist-worker"}),", ",(0,s.jsx)(n.code,{children:"inbox-store"}),", and ",(0,s.jsx)(n.code,{children:"retain-store"})," have more than one Voter configured, otherwise data migration will not happen:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"dist_worker_range_voter_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"inbox_store_range_voter_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"retain_store_range_voter_count"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Node Upgrade Limitation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Do not upgrade more than half of the nodes simultaneously to avoid making the cluster unavailable."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"In-Place Upgrade"}),": Suitable for upgrades within the same major and minor versions (x.y), where data and RPC protocol compatibility are maintained."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Replace Upgrade"}),": Necessary for upgrades across minor versions or where data compatibility may not be maintained. Follow the step-by-step process to ensure a smooth transition."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},53546:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(59729);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);