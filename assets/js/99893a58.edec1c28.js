"use strict";(self.webpackChunkBifroMQ=self.webpackChunkBifroMQ||[]).push([[1523],{10316:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"plugin/setting_provider/intro","title":"Setting Provider","description":"BifroMQ defines a category of Tenant-level Settings that can be modified at runtime, allowing for dynamic adjustment of BifroMQ\'s service behavior per tenant. The purpose of the Setting Provider Plugin is to supply","source":"@site/docs/plugin/setting_provider/intro.md","sourceDirName":"plugin/setting_provider","slug":"/plugin/setting_provider/intro","permalink":"/docs/plugin/setting_provider/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/bifromq-sites/tree/master/website/docs/plugin/setting_provider/intro.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"intro","sidebar_position":0,"title":"Setting Provider"},"sidebar":"tutorialSidebar","previous":{"title":"Resource Throttler","permalink":"/docs/plugin/resource_throttler"},"next":{"title":"Tenant-level Settings","permalink":"/docs/plugin/setting_provider/tenantsetting"}}');var r=t(23420),s=t(65404);const o={id:"intro",sidebar_position:0,title:"Setting Provider"},d=void 0,a={},l=[{value:"Initial Values and Validation of Settings",id:"initial-values-and-validation-of-settings",level:2},{value:"Updating Current Value of Setting",id:"updating-current-value-of-setting",level:2},{value:"Cache Behavior",id:"cache-behavior",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Implementation Example",id:"implementation-example",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["BifroMQ defines a category of ",(0,r.jsx)(n.a,{href:"/docs/plugin/setting_provider/tenantsetting",children:"Tenant-level Settings"})," that can be modified at runtime, allowing for dynamic adjustment of BifroMQ's service behavior per tenant. The purpose of the Setting Provider Plugin is to supply\ncustom values for these settings at runtime."]}),"\n",(0,r.jsx)(n.p,{children:"The Plugin's interface is defined in the following Maven module:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\n<dependency>\n    <groupId>org.apache.bifromq</groupId>\n    <artifactId>bifromq-plugin-setting-provider</artifactId>\n    <version>X.Y.Z</version> \x3c!--replace X.Y.Z with latest version number--\x3e\n</dependency>\n"})}),"\n",(0,r.jsx)(n.p,{children:"BifroMQ allows only a single instance of the Setting Provider to run at a time. You can configure the specific implementation class to be loaded through a configuration file by specifying its fully qualified name (FQN) using the following\nkey:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'settingProviderFQN: "YOUR_SETTING_PROVIDER_CLASS"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"initial-values-and-validation-of-settings",children:"Initial Values and Validation of Settings"}),"\n",(0,r.jsxs)(n.p,{children:["Each Setting has an initial value, for example, MaxTopicLength has an initial value of 255 and is validated to be an integer between 0 and 65535. A Setting\u2019s initial value can be overridden by a System Property of the same name, for\nexample, adding ",(0,r.jsx)(n.code,{children:"-DMaxTopicLength=128"})," to the JVM launch parameters of BifroMQ. Note that the initial value passed through the System Property must be correctly parsed to the corresponding data type, otherwise, the override will not be\nsuccessful."]}),"\n",(0,r.jsx)(n.h2,{id:"updating-current-value-of-setting",children:"Updating Current Value of Setting"}),"\n",(0,r.jsxs)(n.p,{children:["BifroMQ updates the current value of a Setting by invoking the SettingProvider Plugin's ",(0,r.jsx)(n.code,{children:"provide"})," method. The signature of the provide method is as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public <R> R provide(Setting setting, String tenantId);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This method is called by BifroMQ's thread pool, hence when implementing the Setting Provider Plugin, keep the following in mind:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Avoid including heavy business logic within the provide method to ensure it returns quickly, as this can otherwise negatively impact BifroMQ's performance."}),"\n",(0,r.jsxs)(n.li,{children:["When it is not possible to quickly determine the value of a Setting, it can return ",(0,r.jsx)(n.code,{children:"null"}),", in which case the Setting will continue to use its current value. This allows for the decision logic for the Setting to be made asynchronous."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cache-behavior",children:"Cache Behavior"}),"\n",(0,r.jsx)(n.p,{children:"The values of Settings for different tenants are cached to reduce the number of calls to the Setting Provider. The following JVM system properties control the caching behavior to balance the immediacy of runtime settings with the load of\nrequests:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"System Property Name"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"setting_provide_init_value"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsxs)(n.td,{children:["Determines whether to call ",(0,r.jsx)(n.code,{children:"provide"})," to populate the cache on a cache miss. By default, the initial value is used."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"setting_refresh_seconds"})}),(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"The interval, in seconds, between refreshes of a cached setting."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"setting_expire_seconds"})}),(0,r.jsx)(n.td,{children:"300"}),(0,r.jsx)(n.td,{children:"The expiration time, in seconds, of a setting in the cache."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"setting_tenant_cache_limit"})}),(0,r.jsx)(n.td,{children:"100"}),(0,r.jsx)(n.td,{children:"The maximum number of tenants' values that can be cached."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Enabling ",(0,r.jsx)(n.code,{children:"setting_provide_init_value"})," could potentially block BifroMQ's working threads and cause performance issues if the ",(0,r.jsx)(n.code,{children:"provide"})," method is slow."]}),"\n",(0,r.jsx)(n.h2,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsxs)(n.p,{children:["Because the ",(0,r.jsx)(n.code,{children:"provide"})," method is frequently called, BifroMQ records and outputs the following metrics to help\nplugin implementers observe the performance indicators of the plugin interface methods:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Metric Name"}),(0,r.jsx)(n.th,{children:"Meter Type"}),(0,r.jsxs)(n.th,{children:["Tag(",(0,r.jsx)(n.code,{children:"method"}),")"]}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"call.exec.timer"})}),(0,r.jsx)(n.td,{children:"TIMER"}),(0,r.jsx)(n.td,{children:"SettingProvider/provide"}),(0,r.jsxs)(n.td,{children:["Latency for ",(0,r.jsx)(n.code,{children:"provide"})," call"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"call.exec.fail.count"})}),(0,r.jsx)(n.td,{children:"COUNTER"}),(0,r.jsx)(n.td,{children:"SettingProvider/provide"}),(0,r.jsxs)(n.td,{children:["Fail counter for ",(0,r.jsx)(n.code,{children:"provide"})," call"]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-example",children:"Implementation Example"}),"\n",(0,r.jsxs)(n.p,{children:["BifroMQ includes a demonstration implementation of a WebHook-based SettingProvider that can be enabled by specifying ",(0,r.jsx)(n.code,{children:"settingProviderFQN"})," as ",(0,r.jsx)(n.code,{children:"com.baidu.demo.plugin.DemoSettingProvider"})," in\nthe ",(0,r.jsx)(n.a,{href:"/docs/admin_guide/configuration/intro",children:"configuration file"}),". The example implementation uses the JVM startup parameter (",(0,r.jsx)(n.code,{children:"-Dplugin.settingprovider.url"}),") to specify a webhook callback URL."]}),"\n",(0,r.jsxs)(n.p,{children:["When BifroMQ calls the ",(0,r.jsx)(n.code,{children:"provide"})," method, the plugin initiates an HTTP GET request containing the ",(0,r.jsx)(n.code,{children:"tenant_id"})," and ",(0,r.jsx)(n.code,{children:"setting_name"})," headers, corresponding to the two parameters of the ",(0,r.jsx)(n.code,{children:"provide"})," method. The string contained in the response body\nis parsed into the corresponding Setting value type as the return value."]}),"\n",(0,r.jsxs)(n.p,{children:["Below is a simple Node implementation of a WebhookServer for testing the example plugin, with webhook URLs: ",(0,r.jsx)(n.code,{children:"http://<ADDR>:<PORT>/query"})," and ",(0,r.jsx)(n.code,{children:"http://<ADDR>:<PORT>/provide"})," for querying and setting runtime Settings for a given tenant,\nrespectively."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const http = require('http');\nconst url = require('url');\n\nconst settingMap = {};\nconst server =\n\n http.createServer((req, res) => {\n  const parsedUrl = url.parse(req.url, true);\n  the pathname = parsedUrl.pathname;\n\n  res.setHeader('Content-Type', 'text/plain');\n\n  if (pathname === '/query') {\n    const tenantId = req.headers['tenant_id'];\n    the settingName = req.headers['setting_name'];\n    const key = `${tenantId}${settingName}`;\n    if (key in settingMap) {\n      res.end(`${settingMap[key]}`);\n    } else {\n      res.statusCode = 404;\n      res.end(\"\");\n    }\n  }\n  else if (pathname === '/provide') {\n    const tenantId = req.headers['tenant_id'];\n    the settingName = req.headers['setting_name'];\n    const key = `${tenantId}${settingName}`;\n\n    let body = [];\n    req.on('data', (chunk) => {\n      body.push(chunk);\n    }).on('end', () => {\n      body = Buffer.concat(body).toString();\n      settingMap[key] = body;\n      res.end('OK');\n    });\n  }\n  else {\n    res.statusCode = 404;\n    res.end('Not Found');\n  }\n});\n\nconst args = process.argv.slice(2);\nconst hostname = args[0] || 'localhost';\nconst port = args[1] || 3000;\n\nserver.listen(port, hostname, () => {\n  console.log(`Server listening on port ${server.address().port} at ${server.address().address}`);\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(36672);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);